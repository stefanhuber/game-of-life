{"version":3,"file":"bundle.js","sources":["../../src/game-of-life/view.ts","../../src/game-of-life/helpers.ts","../../src/game-of-life/model.ts","../../src/game-settings/view.ts","../../src/colors.ts","../../src/controller.ts","../../src/index.ts"],"sourcesContent":["export class View {\r\n    public static lineColor:string = \"#eee\";\r\n    public static lineWidth:number = 1;\r\n    public static fillColorUninitialized:string = \"#fff\";\r\n    public static fillColorLiving:string = \"#f00\";\r\n    public static fillColorDead:string = \"#fcc\";\r\n\r\n    protected canvas:HTMLCanvasElement;\r\n    \r\n    protected rows:number;\r\n    protected columns:number;\r\n    protected cellSize:number;\r\n    protected width:number;\r\n    protected height:number;\r\n\r\n    constructor(rows:number, columns:number, cellSize:number = 10) {\r\n        this.canvas = document.querySelector('canvas');\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.cellSize = cellSize;\r\n        this.width = (rows * cellSize) + (View.lineWidth * 2);\r\n        this.height = (columns * cellSize) + (View.lineWidth * 2);\r\n    }\r\n\r\n    draw(board:number[][]) {\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        \r\n        let context = this.canvas.getContext(\"2d\");\r\n        context.lineWidth = View.lineWidth;\r\n        context.strokeStyle = View.lineColor;\r\n\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.columns; j++) {\r\n                context.beginPath();\r\n                context.rect((i * this.cellSize)+1, (j * this.cellSize)+1, this.cellSize, this.cellSize);\r\n                context.stroke();\r\n\r\n                if (board[i][j] > 0) {\r\n                    context.fillStyle = View.fillColorLiving;\r\n                } else if (board[i][j] == 0) {\r\n                    context.fillStyle = View.fillColorDead;\r\n                } else {\r\n                    context.fillStyle = View.fillColorUninitialized;\r\n                }\r\n\r\n                context.fill();\r\n            }\r\n        }\r\n    }\r\n}","\r\nexport function countLivingNeighbours(board:number[][], row:number, column:number): number {\r\n    let count = 0;\r\n\r\n    for (let r = row - 1; r <= row + 1; r++) {\r\n        for (let c = column - 1; c <= column + 1; c++) {\r\n            if (r >= 0 && r < board.length &&\r\n                c >= 0 && c < board[0].length &&\r\n                (c != column || r != row))\r\n                count += (board[r][c] > 0 ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport function countLivingNeighboursSpherical(board:number[][], row:number, column:number): number {\r\n    let count = 0;\r\n\r\n    for (let r = row - 1; r <= row + 1; r++) {\r\n        for (let c = column - 1; c <= column + 1; c++) {\r\n            let rtmp = r;\r\n            let ctmp = c;\r\n            \r\n            if (rtmp < 0 || rtmp >= board.length) {\r\n                rtmp = rtmp < 0 ? board.length - 1 : 0;\r\n            }\r\n            if (ctmp < 0 || ctmp >= board[rtmp].length) {\r\n                ctmp = ctmp < 0 ? board[rtmp].length - 1 : 0;\r\n            }\r\n            if (ctmp != column || rtmp != row) {\r\n                count += (board[rtmp][ctmp] > 0 ? 1 : 0);\r\n            }            \r\n        }\r\n    }\r\n\r\n    return count;\r\n}","import * as helpers from './helpers';\r\n\r\nexport class Model {\r\n    public static livingCell:number = 1;\r\n    public static deadCell:number = 0;\r\n    public static initCell:number = -1;\r\n    public static countMethod:string = \"normal\";\r\n\r\n    protected _board:number[][] = [];\r\n    protected _generation:number = 0;\r\n\r\n    get board(): number[][] {\r\n        return this._board;\r\n    }\r\n\r\n    get generation(): number {\r\n        return this._generation;\r\n    }\r\n\r\n    get livingCells(): number {\r\n        let livingCells = 0;\r\n\r\n        for (let i = 0; i < this._board.length; i++) {\r\n            for (let j = 0; j < this._board[i].length; j++) {\r\n                if (this._board[i][j] > 0) {\r\n                    livingCells++;\r\n                }                \r\n            }\r\n        }\r\n\r\n        return livingCells;\r\n    }\r\n\r\n    constructor(row:number, column:number) {\r\n        for (let r = 0; r < row; r++) {\r\n            this._board[r] = [];\r\n            for (let c = 0; c < column; c++) {\r\n                this._board[r][c] = Model.initCell;\r\n            }\r\n        }  \r\n    }\r\n\r\n    clear(): Model {\r\n        for (let r = 0; r < this._board.length; r++) {\r\n            for (let c = 0; c < this._board[r].length; c++) {\r\n                this._board[r][c] = Model.initCell;\r\n            }\r\n        }        \r\n\r\n        this._generation = 0;\r\n        return this;\r\n    }\r\n\r\n    randomize(probabilityLiving:number = 0.3): Model {\r\n        this.clear();\r\n\r\n        for (let r = 0; r < this._board.length; r++) {\r\n            for (let c = 0; c < this._board[r].length; c++) {\r\n                if (Math.random() <= probabilityLiving) {\r\n                    this._board[r][c] = Model.livingCell;\r\n                }\r\n            }\r\n        }  \r\n\r\n        return this;\r\n    }\r\n\r\n    modify(row:number, column:number, value:number = 1): Model {\r\n        this._board[row][column] = value;\r\n        return this;\r\n    }\r\n\r\n    countLivingNeighbours(row:number, column:number): number {\r\n        if (Model.countMethod == \"normal\") {\r\n            return helpers.countLivingNeighbours(this._board, row, column);\r\n        } else {\r\n            return helpers.countLivingNeighboursSpherical(this._board, row, column);\r\n        }\r\n    }\r\n\r\n    transform(): number[][] {\r\n        this._generation += 1;\r\n        return (this._board = this._board.map((row, r) => {\r\n            return row.map((column, c) => {\r\n                return this.getNextState(column, this.countLivingNeighbours(r, c));\r\n            });\r\n        }));\r\n    }\r\n\r\n    getNextState(state:number, neighbours:number) : number {\r\n        if (state <= Model.deadCell && neighbours == 3) {\r\n            return Model.livingCell;\r\n        } else if (state == Model.livingCell && neighbours >= 2 && neighbours <= 3) {\r\n            return Model.livingCell;\r\n        } else if (state == Model.initCell) {\r\n            return Model.initCell;\r\n        } else {\r\n            return Model.deadCell;\r\n        }\r\n    }\r\n}\r\n","export class View {\r\n    protected handler:(event:string, data:any) => void;\r\n\r\n    protected outputGeneration:HTMLSpanElement;\r\n    protected outputLivingCells:HTMLSpanElement;\r\n    protected buttonPlay:HTMLButtonElement;\r\n    protected buttonStep:HTMLButtonElement;\r\n    protected buttonClear:HTMLButtonElement;\r\n    protected buttonRandomize:HTMLButtonElement;\r\n    protected selectColorScheme:HTMLSelectElement;\r\n    protected selectProbability:HTMLSelectElement;\r\n    protected selectFps:HTMLSelectElement;\r\n    protected selectNeighbours:HTMLSelectElement;\r\n\r\n    protected playing:boolean = false;\r\n\r\n    constructor() {\r\n        this.buttonClear = document.querySelector('#clear-button');\r\n        this.buttonStep = document.querySelector('#step-button');\r\n        this.buttonPlay = document.querySelector('#play-button');\r\n        this.buttonRandomize = document.querySelector('#randomize-button');\r\n        this.outputGeneration = document.querySelector('#output-generation');\r\n        this.outputLivingCells = document.querySelector('#output-living-cells');\r\n        this.selectProbability = document.querySelector('#probability-select');\r\n        this.selectColorScheme = document.querySelector('#color-scheme-select');\r\n        this.selectFps = document.querySelector('#fps-select');\r\n        this.selectNeighbours = document.querySelector('#neighbours-select');\r\n\r\n        this.buttonStep.addEventListener('click', () => this.step());\r\n        this.buttonClear.addEventListener('click', () => this.clear());\r\n        this.buttonPlay.addEventListener('click', () => this.play());\r\n        this.buttonRandomize.addEventListener('click', () => this.randomize());\r\n        this.selectColorScheme.addEventListener('change', (event:any) => this.changeColorScheme(event.target.value));\r\n        this.selectFps.addEventListener('change', (event:any) => this.changeFps(event.target.value));\r\n        this.selectNeighbours.addEventListener('change', (event:any) => this.changeChangeMethod(event.target.value));\r\n    }\r\n\r\n    play() {\r\n        if (!this.stopPlaying()) {\r\n            this.playing = true;\r\n            this.buttonPlay.innerHTML = \"Pause\";\r\n            this.trigger('play');\r\n        } else {\r\n            this.trigger('pause');\r\n        }        \r\n    }\r\n\r\n    step() {\r\n        this.stopPlaying();        \r\n        this.trigger('step');\r\n    }\r\n\r\n    clear() {\r\n        this.stopPlaying();       \r\n        this.trigger('clear');\r\n    }\r\n\r\n    randomize() {\r\n        this.stopPlaying();\r\n        this.trigger('randomize', {\r\n            probability: this.selectProbability.value\r\n        });\r\n    }\r\n\r\n    changeColorScheme(scheme:string) {\r\n        this.trigger('color', {\r\n            scheme: scheme\r\n        })\r\n    }\r\n\r\n    changeFps(fps:number) {\r\n        this.trigger('fps', {\r\n            fps: fps\r\n        })\r\n    }\r\n\r\n    changeChangeMethod(method:string) {\r\n        this.trigger('count-method', {\r\n            method: method\r\n        })\r\n    }\r\n\r\n    stopPlaying(): boolean {\r\n        if (this.playing) {\r\n            this.playing = false;\r\n            this.buttonPlay.innerHTML = \"Play\";\r\n            return true;        \r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render(data:{generation:number, livingCells:number } = {generation:0, livingCells:0}) {\r\n        this.outputGeneration.innerHTML = data.generation.toString();\r\n        this.outputLivingCells.innerHTML = data.livingCells.toString();\r\n    }\r\n\r\n    trigger(event:string, data:any = undefined) {\r\n        if (this.handler) {\r\n            this.handler(event, data);\r\n        }        \r\n    }\r\n\r\n    register(handler:(event:string, data:any) => void) {\r\n        this.handler = handler;\r\n    }\r\n\r\n}","export const COLORS:any = {\r\n    \"red\": {\r\n        \"living\": \"#f00\" ,\r\n        \"dead\": \"#fcc\"\r\n    },\r\n    \"green\": {\r\n        \"living\": \"#0f0\",\r\n        \"dead\": \"#cfc\",\r\n    },\r\n    \"blue\": {\r\n        \"living\": \"#00f\",\r\n        \"dead\": \"#ccf\"\r\n    },\r\n    \"magenta\": {\r\n        \"living\": \"#f0f\",\r\n        \"dead\": \"#fcf\",\r\n    },\r\n    \"cyan\": {\r\n        \"living\": \"#0ff\",\r\n        \"dead\": \"#cff\"\r\n    },\r\n    \"yellow\": {\r\n        \"living\": \"#ff0\",\r\n        \"dead\": \"#ffc\"\r\n    }\r\n};","import * as gol from './game-of-life';\r\nimport * as settings from './game-settings';\r\nimport {COLORS} from './colors';\r\n\r\nexport class Controller {\r\n\r\n    public static rows:number = 115;\r\n    public static columns:number = 80;\r\n    public static cellSize:number = 8;\r\n\r\n    protected model:gol.Model;\r\n    protected board:gol.View;\r\n    protected settings:settings.View;\r\n\r\n    protected fps:number = 10;\r\n    protected running:boolean = false;\r\n\r\n    static create() {\r\n        let ctrl = new Controller();\r\n        ctrl.model = new gol.Model(Controller.rows, Controller.columns);\r\n        ctrl.board = new gol.View(Controller.rows, Controller.columns, Controller.cellSize);\r\n        ctrl.settings = new settings.View();\r\n        ctrl.registerEventHandler();\r\n        ctrl.settings.render();        \r\n        return ctrl;\r\n    }\r\n\r\n    init() {\r\n        this.model.randomize(0.1);\r\n        this.board.draw(this.model.board);\r\n    }\r\n\r\n    clear() {\r\n        this.running = false;\r\n        this.model.clear();\r\n        this.board.draw(this.model.board);\r\n        this.settings.render();\r\n    }\r\n\r\n    step() {\r\n        this.model.transform();\r\n        this.board.draw(this.model.board);\r\n        this.settings.render({\r\n            generation: this.model.generation ,\r\n            livingCells: this.model.livingCells\r\n        });\r\n    }\r\n\r\n    play() {\r\n        this.running = true;\r\n        this.loop();\r\n    }\r\n\r\n    pause() {\r\n        this.running = false;\r\n    }\r\n\r\n    randomize(probabiliy:number) {\r\n        this.running = false;\r\n        this.model.randomize(probabiliy);\r\n        this.board.draw(this.model.board);\r\n        this.settings.render({\r\n            generation: this.model.generation,\r\n            livingCells: this.model.livingCells\r\n        })\r\n    }\r\n\r\n    color(scheme:string = \"red\") {\r\n        gol.View.fillColorLiving = COLORS[scheme].living;\r\n        gol.View.fillColorDead = COLORS[scheme].dead;\r\n        this.board.draw(this.model.board);\r\n    }\r\n\r\n    framesPerSecond(fps:number = 10) {\r\n        this.fps = fps;\r\n    }\r\n\r\n    neighbourCountMethod(neighbours:string = \"normal\") {\r\n        gol.Model.countMethod = neighbours;\r\n    }\r\n\r\n    registerEventHandler() {\r\n        this.settings.register((event:string, data:any) => {\r\n            if (event == \"play\") {\r\n                this.play();\r\n            } else if (event == \"pause\") {\r\n                this.pause();\r\n            } else if (event == \"step\") {\r\n                this.pause();\r\n                this.step();\r\n            } else if (event == \"randomize\") {\r\n                this.randomize(data['probability'] / 10);\r\n            } else if (event == \"color\") {\r\n                this.color(data['scheme']);\r\n            } else if (event == \"clear\") {\r\n                this.clear();\r\n            } else if (event == \"fps\") {\r\n                this.framesPerSecond(data['fps']);\r\n            } else if (event == \"count-method\") {\r\n                this.neighbourCountMethod(data['method']);\r\n            }\r\n        });\r\n    }\r\n\r\n    loop() {\r\n        setTimeout(() => {           \r\n            if (this.running) {\r\n                this.step();\r\n                this.loop();\r\n            }            \r\n        }, 1000 / this.fps);\r\n    }\r\n\r\n}","import {Controller} from './controller';\r\n\r\nconst controller = Controller.create();\r\ncontroller.init();\r\n"],"names":["helpers.countLivingNeighbours","helpers.countLivingNeighboursSpherical","gol.Model","gol.View","settings.View"],"mappings":"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"}